// Criação de variáveis com SCSS
// A ordem de declaração importa!
$cor-principal: rgb(162, 89, 230);
$cor-secundaria: rgb(255, 81, 0);
$font-primaria: monospace;

// Forma de escrevermos partes de códigos que vai ser reutilizada.
@mixin estilo-do-titulo {
  font-size: 2.2rem;
  position: relative;
  margin-left: 20px;
  font-family: $font-primaria;
  color: $cor-principal;
  // Utilizando o & do nesting, ele vai para frente do seletor
  // que for aplicado o include do mixin.
  &::before {
    content: '';
    position: absolute;
    width: 20px;
    height: 5px;
    border-radius: 5px;
    background-color: $cor-secundaria;
    left: -25px;
    top: 17px;
  }
}
// É possivel passar argumentos dentro do mixin, e
// valores padrões para esses argumentos
@mixin separador($color, $largura) {
  &::after {
    content: '';
    display: block;
    width: $largura;
    height: 4px;
    background-color: $color;
    border-radius: 5px;
  }
}

* {
  margin: 0px;
  padding: 0px;
  box-sizing: border-box;
}

body {
  display: flex;
  align-items: center;
  gap: 50px;
  flex-direction: column;
  height: 100vh;
}

section.conteiner {
  display: flex;
  flex-direction: column;
  gap: 30px;
  align-items: flex-start;
  max-width: 400px;
  margin-top: 30px;

  h1 {
    @include estilo-do-titulo;
    @include separador($cor-secundaria, 100px);
  }

  p {
    font-size: 1.2rem;
    font-family: 'Arial';
  }

  button.botao {
    background-color: $cor-principal;
    padding: 10px 15px;
    border-radius: 5px;
    font-family: $font-primaria;
    font-size: 1rem;
    text-transform: uppercase;
    font-weight: 600;
    color: white;
    border: 0px;
  }
}
// Usar no maximo 3 nestings
ul.lista {
  text-align: center;
  li {
    display: inline-block;
    list-style: none;
    padding: 10px;
    background-color: $cor-principal;
    // & para grudar algo no pai, no caso o :hover - li:hover
    &:hover {
      background-color: $cor-secundaria;
    }
    a {
      display: block;
      text-decoration: none;
      position: relative;
      color: white;
      &:before {
        content: '';
        background-color: $cor-secundaria;
        position: absolute;
        width: 100%;
        height: 3px;
        border-radius: 3px;
        bottom: -20px;
      }
    }
  }
}

// Forma de utilizar argumentos em seguência
@mixin sombras($sombras...) {
  box-shadow: $sombras;
}

.lista2 {
  text-align: center;
  li {
    display: inline-block;
    margin: 5px;
    list-style: none;
    padding: 10px;
    @include sombras(
      2px 2px 0px 2px rgb(212, 0, 255),
      4px 4px 0px 2px rgb(38, 0, 255),
      6px 6px 0px 2px rgb(0, 255, 64)
    );
  }
}

// Forma melhor de fazer media-queries com SCSS
// criando um mixin da mediaquery e incluindo o @content
// Assim tudo código passado dentro do mixin em algum seletor 
// é transferido para o content
@mixin mobile {
  @media (max-width: 600px) {
    @content;
  }
}

body {
  background-color: #fffefe;
  @include mobile {
    h1 {
      color: $cor-secundaria !important;
    }
    background-color: rgb(95, 95, 95) !important;
  }
}
